// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository_interface/repository_interface_genre.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	entity "youchoose/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockGenreRepositoryInterface is a mock of GenreRepositoryInterface interface.
type MockGenreRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGenreRepositoryInterfaceMockRecorder
}

// MockGenreRepositoryInterfaceMockRecorder is the mock recorder for MockGenreRepositoryInterface.
type MockGenreRepositoryInterfaceMockRecorder struct {
	mock *MockGenreRepositoryInterface
}

// NewMockGenreRepositoryInterface creates a new mock instance.
func NewMockGenreRepositoryInterface(ctrl *gomock.Controller) *MockGenreRepositoryInterface {
	mock := &MockGenreRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockGenreRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenreRepositoryInterface) EXPECT() *MockGenreRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGenreRepositoryInterface) Create(genre *entity.Genre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", genre)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockGenreRepositoryInterfaceMockRecorder) Create(genre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGenreRepositoryInterface)(nil).Create), genre)
}

// Deactivate mocks base method.
func (m *MockGenreRepositoryInterface) Deactivate(genre *entity.Genre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate", genre)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockGenreRepositoryInterfaceMockRecorder) Deactivate(genre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockGenreRepositoryInterface)(nil).Deactivate), genre)
}

// DoTheseGenresAreIncludedInTheMovie mocks base method.
func (m *MockGenreRepositoryInterface) DoTheseGenresAreIncludedInTheMovie(movieID string, genresIDs []string) (bool, []entity.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoTheseGenresAreIncludedInTheMovie", movieID, genresIDs)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]entity.Genre)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DoTheseGenresAreIncludedInTheMovie indicates an expected call of DoTheseGenresAreIncludedInTheMovie.
func (mr *MockGenreRepositoryInterfaceMockRecorder) DoTheseGenresAreIncludedInTheMovie(movieID, genresIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTheseGenresAreIncludedInTheMovie", reflect.TypeOf((*MockGenreRepositoryInterface)(nil).DoTheseGenresAreIncludedInTheMovie), movieID, genresIDs)
}

// DoTheseGenresExist mocks base method.
func (m *MockGenreRepositoryInterface) DoTheseGenresExist(genreIDs []string) (bool, []entity.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoTheseGenresExist", genreIDs)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]entity.Genre)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DoTheseGenresExist indicates an expected call of DoTheseGenresExist.
func (mr *MockGenreRepositoryInterfaceMockRecorder) DoTheseGenresExist(genreIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTheseGenresExist", reflect.TypeOf((*MockGenreRepositoryInterface)(nil).DoTheseGenresExist), genreIDs)
}

// GetAll mocks base method.
func (m *MockGenreRepositoryInterface) GetAll() ([]entity.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entity.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGenreRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGenreRepositoryInterface)(nil).GetAll))
}

// GetAllByMovieID mocks base method.
func (m *MockGenreRepositoryInterface) GetAllByMovieID(movieID string) ([]entity.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByMovieID", movieID)
	ret0, _ := ret[0].([]entity.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByMovieID indicates an expected call of GetAllByMovieID.
func (mr *MockGenreRepositoryInterfaceMockRecorder) GetAllByMovieID(movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByMovieID", reflect.TypeOf((*MockGenreRepositoryInterface)(nil).GetAllByMovieID), movieID)
}

// GetByID mocks base method.
func (m *MockGenreRepositoryInterface) GetByID(genreID string) (entity.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", genreID)
	ret0, _ := ret[0].(entity.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockGenreRepositoryInterfaceMockRecorder) GetByID(genreID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGenreRepositoryInterface)(nil).GetByID), genreID)
}

// Update mocks base method.
func (m *MockGenreRepositoryInterface) Update(genre *entity.Genre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", genre)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGenreRepositoryInterfaceMockRecorder) Update(genre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGenreRepositoryInterface)(nil).Update), genre)
}
