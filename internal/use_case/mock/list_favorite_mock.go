// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository_interface/repository_interface_list_favorite.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	entity "youchoose/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockListFavoriteRepositoryInterface is a mock of ListFavoriteRepositoryInterface interface.
type MockListFavoriteRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockListFavoriteRepositoryInterfaceMockRecorder
}

// MockListFavoriteRepositoryInterfaceMockRecorder is the mock recorder for MockListFavoriteRepositoryInterface.
type MockListFavoriteRepositoryInterfaceMockRecorder struct {
	mock *MockListFavoriteRepositoryInterface
}

// NewMockListFavoriteRepositoryInterface creates a new mock instance.
func NewMockListFavoriteRepositoryInterface(ctrl *gomock.Controller) *MockListFavoriteRepositoryInterface {
	mock := &MockListFavoriteRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockListFavoriteRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListFavoriteRepositoryInterface) EXPECT() *MockListFavoriteRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockListFavoriteRepositoryInterface) Create(listFavorite *entity.ListFavorite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", listFavorite)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockListFavoriteRepositoryInterfaceMockRecorder) Create(listFavorite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockListFavoriteRepositoryInterface)(nil).Create), listFavorite)
}

// Deactivate mocks base method.
func (m *MockListFavoriteRepositoryInterface) Deactivate(listFavoriteID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate", listFavoriteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockListFavoriteRepositoryInterfaceMockRecorder) Deactivate(listFavoriteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockListFavoriteRepositoryInterface)(nil).Deactivate), listFavoriteID)
}

// GetAll mocks base method.
func (m *MockListFavoriteRepositoryInterface) GetAll() ([]entity.ListFavorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entity.ListFavorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockListFavoriteRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockListFavoriteRepositoryInterface)(nil).GetAll))
}

// GetAllByListID mocks base method.
func (m *MockListFavoriteRepositoryInterface) GetAllByListID(listID string) ([]entity.ListFavorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByListID", listID)
	ret0, _ := ret[0].([]entity.ListFavorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByListID indicates an expected call of GetAllByListID.
func (mr *MockListFavoriteRepositoryInterfaceMockRecorder) GetAllByListID(listID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByListID", reflect.TypeOf((*MockListFavoriteRepositoryInterface)(nil).GetAllByListID), listID)
}

// GetByID mocks base method.
func (m *MockListFavoriteRepositoryInterface) GetByID(listFavoriteID string) (entity.ListFavorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", listFavoriteID)
	ret0, _ := ret[0].(entity.ListFavorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockListFavoriteRepositoryInterfaceMockRecorder) GetByID(listFavoriteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockListFavoriteRepositoryInterface)(nil).GetByID), listFavoriteID)
}

// Update mocks base method.
func (m *MockListFavoriteRepositoryInterface) Update(listFavorite *entity.ListFavorite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", listFavorite)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockListFavoriteRepositoryInterfaceMockRecorder) Update(listFavorite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockListFavoriteRepositoryInterface)(nil).Update), listFavorite)
}
