// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository_interface/repository_interface_movie_actor.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	entity "youchoose/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockMovieActorRepositoryInterface is a mock of MovieActorRepositoryInterface interface.
type MockMovieActorRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMovieActorRepositoryInterfaceMockRecorder
}

// MockMovieActorRepositoryInterfaceMockRecorder is the mock recorder for MockMovieActorRepositoryInterface.
type MockMovieActorRepositoryInterfaceMockRecorder struct {
	mock *MockMovieActorRepositoryInterface
}

// NewMockMovieActorRepositoryInterface creates a new mock instance.
func NewMockMovieActorRepositoryInterface(ctrl *gomock.Controller) *MockMovieActorRepositoryInterface {
	mock := &MockMovieActorRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockMovieActorRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieActorRepositoryInterface) EXPECT() *MockMovieActorRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMovieActorRepositoryInterface) Create(movieActor *entity.MovieActor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", movieActor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMovieActorRepositoryInterfaceMockRecorder) Create(movieActor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMovieActorRepositoryInterface)(nil).Create), movieActor)
}

// CreateMany mocks base method.
func (m *MockMovieActorRepositoryInterface) CreateMany(movieActors *[]entity.MovieActor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany", movieActors)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockMovieActorRepositoryInterfaceMockRecorder) CreateMany(movieActors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockMovieActorRepositoryInterface)(nil).CreateMany), movieActors)
}

// Deactivate mocks base method.
func (m *MockMovieActorRepositoryInterface) Deactivate(movieActor *entity.MovieActor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate", movieActor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockMovieActorRepositoryInterfaceMockRecorder) Deactivate(movieActor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockMovieActorRepositoryInterface)(nil).Deactivate), movieActor)
}

// GetAll mocks base method.
func (m *MockMovieActorRepositoryInterface) GetAll() ([]entity.MovieActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entity.MovieActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMovieActorRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMovieActorRepositoryInterface)(nil).GetAll))
}

// GetAllByActorID mocks base method.
func (m *MockMovieActorRepositoryInterface) GetAllByActorID(actorID string) ([]entity.MovieActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByActorID", actorID)
	ret0, _ := ret[0].([]entity.MovieActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByActorID indicates an expected call of GetAllByActorID.
func (mr *MockMovieActorRepositoryInterfaceMockRecorder) GetAllByActorID(actorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByActorID", reflect.TypeOf((*MockMovieActorRepositoryInterface)(nil).GetAllByActorID), actorID)
}

// GetAllByMovieID mocks base method.
func (m *MockMovieActorRepositoryInterface) GetAllByMovieID(movieID string) ([]entity.MovieActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByMovieID", movieID)
	ret0, _ := ret[0].([]entity.MovieActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByMovieID indicates an expected call of GetAllByMovieID.
func (mr *MockMovieActorRepositoryInterfaceMockRecorder) GetAllByMovieID(movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByMovieID", reflect.TypeOf((*MockMovieActorRepositoryInterface)(nil).GetAllByMovieID), movieID)
}

// GetByID mocks base method.
func (m *MockMovieActorRepositoryInterface) GetByID(movieActorID string) (entity.MovieActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", movieActorID)
	ret0, _ := ret[0].(entity.MovieActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMovieActorRepositoryInterfaceMockRecorder) GetByID(movieActorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMovieActorRepositoryInterface)(nil).GetByID), movieActorID)
}

// Update mocks base method.
func (m *MockMovieActorRepositoryInterface) Update(movieActor *entity.MovieActor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", movieActor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMovieActorRepositoryInterfaceMockRecorder) Update(movieActor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMovieActorRepositoryInterface)(nil).Update), movieActor)
}
