// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository_interface/repository_interface_movie_writer.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	entity "youchoose/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockMovieWriterRepositoryInterface is a mock of MovieWriterRepositoryInterface interface.
type MockMovieWriterRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMovieWriterRepositoryInterfaceMockRecorder
}

// MockMovieWriterRepositoryInterfaceMockRecorder is the mock recorder for MockMovieWriterRepositoryInterface.
type MockMovieWriterRepositoryInterfaceMockRecorder struct {
	mock *MockMovieWriterRepositoryInterface
}

// NewMockMovieWriterRepositoryInterface creates a new mock instance.
func NewMockMovieWriterRepositoryInterface(ctrl *gomock.Controller) *MockMovieWriterRepositoryInterface {
	mock := &MockMovieWriterRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockMovieWriterRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieWriterRepositoryInterface) EXPECT() *MockMovieWriterRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMovieWriterRepositoryInterface) Create(movieWriter *entity.MovieWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", movieWriter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMovieWriterRepositoryInterfaceMockRecorder) Create(movieWriter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMovieWriterRepositoryInterface)(nil).Create), movieWriter)
}

// CreateMany mocks base method.
func (m *MockMovieWriterRepositoryInterface) CreateMany(movieWriters *[]entity.MovieWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany", movieWriters)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockMovieWriterRepositoryInterfaceMockRecorder) CreateMany(movieWriters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockMovieWriterRepositoryInterface)(nil).CreateMany), movieWriters)
}

// Deactivate mocks base method.
func (m *MockMovieWriterRepositoryInterface) Deactivate(movieWriter *entity.MovieWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate", movieWriter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockMovieWriterRepositoryInterfaceMockRecorder) Deactivate(movieWriter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockMovieWriterRepositoryInterface)(nil).Deactivate), movieWriter)
}

// GetAll mocks base method.
func (m *MockMovieWriterRepositoryInterface) GetAll() ([]entity.MovieWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entity.MovieWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMovieWriterRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMovieWriterRepositoryInterface)(nil).GetAll))
}

// GetAllByMovieID mocks base method.
func (m *MockMovieWriterRepositoryInterface) GetAllByMovieID(movieID string) ([]entity.MovieWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByMovieID", movieID)
	ret0, _ := ret[0].([]entity.MovieWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByMovieID indicates an expected call of GetAllByMovieID.
func (mr *MockMovieWriterRepositoryInterfaceMockRecorder) GetAllByMovieID(movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByMovieID", reflect.TypeOf((*MockMovieWriterRepositoryInterface)(nil).GetAllByMovieID), movieID)
}

// GetAllByWriterID mocks base method.
func (m *MockMovieWriterRepositoryInterface) GetAllByWriterID(writerID string) ([]entity.MovieWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByWriterID", writerID)
	ret0, _ := ret[0].([]entity.MovieWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByWriterID indicates an expected call of GetAllByWriterID.
func (mr *MockMovieWriterRepositoryInterfaceMockRecorder) GetAllByWriterID(writerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByWriterID", reflect.TypeOf((*MockMovieWriterRepositoryInterface)(nil).GetAllByWriterID), writerID)
}

// GetByID mocks base method.
func (m *MockMovieWriterRepositoryInterface) GetByID(movieWriterID string) (entity.MovieWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", movieWriterID)
	ret0, _ := ret[0].(entity.MovieWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMovieWriterRepositoryInterfaceMockRecorder) GetByID(movieWriterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMovieWriterRepositoryInterface)(nil).GetByID), movieWriterID)
}

// Update mocks base method.
func (m *MockMovieWriterRepositoryInterface) Update(movieWriter *entity.MovieWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", movieWriter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMovieWriterRepositoryInterfaceMockRecorder) Update(movieWriter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMovieWriterRepositoryInterface)(nil).Update), movieWriter)
}
