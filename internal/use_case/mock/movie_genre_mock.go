// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository_interface/repository_interface_movie_genre.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	entity "youchoose/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockMovieGenreRepositoryInterface is a mock of MovieGenreRepositoryInterface interface.
type MockMovieGenreRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMovieGenreRepositoryInterfaceMockRecorder
}

// MockMovieGenreRepositoryInterfaceMockRecorder is the mock recorder for MockMovieGenreRepositoryInterface.
type MockMovieGenreRepositoryInterfaceMockRecorder struct {
	mock *MockMovieGenreRepositoryInterface
}

// NewMockMovieGenreRepositoryInterface creates a new mock instance.
func NewMockMovieGenreRepositoryInterface(ctrl *gomock.Controller) *MockMovieGenreRepositoryInterface {
	mock := &MockMovieGenreRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockMovieGenreRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieGenreRepositoryInterface) EXPECT() *MockMovieGenreRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMovieGenreRepositoryInterface) Create(movieGenre *entity.MovieGenre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", movieGenre)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMovieGenreRepositoryInterfaceMockRecorder) Create(movieGenre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMovieGenreRepositoryInterface)(nil).Create), movieGenre)
}

// CreateMany mocks base method.
func (m *MockMovieGenreRepositoryInterface) CreateMany(movieGenres *[]entity.MovieGenre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany", movieGenres)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockMovieGenreRepositoryInterfaceMockRecorder) CreateMany(movieGenres interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockMovieGenreRepositoryInterface)(nil).CreateMany), movieGenres)
}

// Deactivate mocks base method.
func (m *MockMovieGenreRepositoryInterface) Deactivate(movieGenre *entity.MovieGenre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate", movieGenre)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockMovieGenreRepositoryInterfaceMockRecorder) Deactivate(movieGenre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockMovieGenreRepositoryInterface)(nil).Deactivate), movieGenre)
}

// GetAll mocks base method.
func (m *MockMovieGenreRepositoryInterface) GetAll() ([]entity.MovieGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entity.MovieGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMovieGenreRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMovieGenreRepositoryInterface)(nil).GetAll))
}

// GetAllByGenreID mocks base method.
func (m *MockMovieGenreRepositoryInterface) GetAllByGenreID(genreID string) ([]entity.MovieGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByGenreID", genreID)
	ret0, _ := ret[0].([]entity.MovieGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByGenreID indicates an expected call of GetAllByGenreID.
func (mr *MockMovieGenreRepositoryInterfaceMockRecorder) GetAllByGenreID(genreID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByGenreID", reflect.TypeOf((*MockMovieGenreRepositoryInterface)(nil).GetAllByGenreID), genreID)
}

// GetAllByMovieID mocks base method.
func (m *MockMovieGenreRepositoryInterface) GetAllByMovieID(movieID string) ([]entity.MovieGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByMovieID", movieID)
	ret0, _ := ret[0].([]entity.MovieGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByMovieID indicates an expected call of GetAllByMovieID.
func (mr *MockMovieGenreRepositoryInterfaceMockRecorder) GetAllByMovieID(movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByMovieID", reflect.TypeOf((*MockMovieGenreRepositoryInterface)(nil).GetAllByMovieID), movieID)
}

// GetByID mocks base method.
func (m *MockMovieGenreRepositoryInterface) GetByID(movieGenreID string) (entity.MovieGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", movieGenreID)
	ret0, _ := ret[0].(entity.MovieGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMovieGenreRepositoryInterfaceMockRecorder) GetByID(movieGenreID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMovieGenreRepositoryInterface)(nil).GetByID), movieGenreID)
}

// Update mocks base method.
func (m *MockMovieGenreRepositoryInterface) Update(movieGenre *entity.MovieGenre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", movieGenre)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMovieGenreRepositoryInterfaceMockRecorder) Update(movieGenre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMovieGenreRepositoryInterface)(nil).Update), movieGenre)
}
