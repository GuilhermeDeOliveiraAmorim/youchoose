// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository_interface/repository_interface_image.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	entity "youchoose/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockImageRepositoryInterface is a mock of ImageRepositoryInterface interface.
type MockImageRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryInterfaceMockRecorder
}

// MockImageRepositoryInterfaceMockRecorder is the mock recorder for MockImageRepositoryInterface.
type MockImageRepositoryInterfaceMockRecorder struct {
	mock *MockImageRepositoryInterface
}

// NewMockImageRepositoryInterface creates a new mock instance.
func NewMockImageRepositoryInterface(ctrl *gomock.Controller) *MockImageRepositoryInterface {
	mock := &MockImageRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepositoryInterface) EXPECT() *MockImageRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockImageRepositoryInterface) Create(image *entity.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockImageRepositoryInterfaceMockRecorder) Create(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockImageRepositoryInterface)(nil).Create), image)
}

// CreateMany mocks base method.
func (m *MockImageRepositoryInterface) CreateMany(images *[]entity.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany", images)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockImageRepositoryInterfaceMockRecorder) CreateMany(images interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockImageRepositoryInterface)(nil).CreateMany), images)
}

// Deactivate mocks base method.
func (m *MockImageRepositoryInterface) Deactivate(image *entity.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockImageRepositoryInterfaceMockRecorder) Deactivate(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockImageRepositoryInterface)(nil).Deactivate), image)
}

// GetAll mocks base method.
func (m *MockImageRepositoryInterface) GetAll() ([]entity.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entity.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockImageRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockImageRepositoryInterface)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockImageRepositoryInterface) GetByID(imageID string) (entity.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", imageID)
	ret0, _ := ret[0].(entity.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockImageRepositoryInterfaceMockRecorder) GetByID(imageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockImageRepositoryInterface)(nil).GetByID), imageID)
}

// Update mocks base method.
func (m *MockImageRepositoryInterface) Update(image *entity.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockImageRepositoryInterfaceMockRecorder) Update(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockImageRepositoryInterface)(nil).Update), image)
}
