// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository_interface/repository_interface_movie_director.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	entity "youchoose/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockMovieDirectorRepositoryInterface is a mock of MovieDirectorRepositoryInterface interface.
type MockMovieDirectorRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMovieDirectorRepositoryInterfaceMockRecorder
}

// MockMovieDirectorRepositoryInterfaceMockRecorder is the mock recorder for MockMovieDirectorRepositoryInterface.
type MockMovieDirectorRepositoryInterfaceMockRecorder struct {
	mock *MockMovieDirectorRepositoryInterface
}

// NewMockMovieDirectorRepositoryInterface creates a new mock instance.
func NewMockMovieDirectorRepositoryInterface(ctrl *gomock.Controller) *MockMovieDirectorRepositoryInterface {
	mock := &MockMovieDirectorRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockMovieDirectorRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieDirectorRepositoryInterface) EXPECT() *MockMovieDirectorRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMovieDirectorRepositoryInterface) Create(movieDirector *entity.MovieDirector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", movieDirector)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMovieDirectorRepositoryInterfaceMockRecorder) Create(movieDirector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMovieDirectorRepositoryInterface)(nil).Create), movieDirector)
}

// CreateMany mocks base method.
func (m *MockMovieDirectorRepositoryInterface) CreateMany(movieDirectors *[]entity.MovieDirector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany", movieDirectors)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockMovieDirectorRepositoryInterfaceMockRecorder) CreateMany(movieDirectors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockMovieDirectorRepositoryInterface)(nil).CreateMany), movieDirectors)
}

// Deactivate mocks base method.
func (m *MockMovieDirectorRepositoryInterface) Deactivate(movieDirector *entity.MovieDirector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate", movieDirector)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockMovieDirectorRepositoryInterfaceMockRecorder) Deactivate(movieDirector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockMovieDirectorRepositoryInterface)(nil).Deactivate), movieDirector)
}

// GetAll mocks base method.
func (m *MockMovieDirectorRepositoryInterface) GetAll() ([]entity.MovieDirector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entity.MovieDirector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMovieDirectorRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMovieDirectorRepositoryInterface)(nil).GetAll))
}

// GetAllByDirectorID mocks base method.
func (m *MockMovieDirectorRepositoryInterface) GetAllByDirectorID(directorID string) ([]entity.MovieDirector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByDirectorID", directorID)
	ret0, _ := ret[0].([]entity.MovieDirector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByDirectorID indicates an expected call of GetAllByDirectorID.
func (mr *MockMovieDirectorRepositoryInterfaceMockRecorder) GetAllByDirectorID(directorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByDirectorID", reflect.TypeOf((*MockMovieDirectorRepositoryInterface)(nil).GetAllByDirectorID), directorID)
}

// GetAllByMovieID mocks base method.
func (m *MockMovieDirectorRepositoryInterface) GetAllByMovieID(movieID string) ([]entity.MovieDirector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByMovieID", movieID)
	ret0, _ := ret[0].([]entity.MovieDirector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByMovieID indicates an expected call of GetAllByMovieID.
func (mr *MockMovieDirectorRepositoryInterfaceMockRecorder) GetAllByMovieID(movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByMovieID", reflect.TypeOf((*MockMovieDirectorRepositoryInterface)(nil).GetAllByMovieID), movieID)
}

// GetByID mocks base method.
func (m *MockMovieDirectorRepositoryInterface) GetByID(movieDirectorID string) (entity.MovieDirector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", movieDirectorID)
	ret0, _ := ret[0].(entity.MovieDirector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMovieDirectorRepositoryInterfaceMockRecorder) GetByID(movieDirectorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMovieDirectorRepositoryInterface)(nil).GetByID), movieDirectorID)
}

// Update mocks base method.
func (m *MockMovieDirectorRepositoryInterface) Update(movieDirector *entity.MovieDirector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", movieDirector)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMovieDirectorRepositoryInterfaceMockRecorder) Update(movieDirector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMovieDirectorRepositoryInterface)(nil).Update), movieDirector)
}
