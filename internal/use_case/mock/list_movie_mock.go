// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository_interface/repository_interface_list_movie.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	entity "youchoose/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockListMovieRepositoryInterface is a mock of ListMovieRepositoryInterface interface.
type MockListMovieRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockListMovieRepositoryInterfaceMockRecorder
}

// MockListMovieRepositoryInterfaceMockRecorder is the mock recorder for MockListMovieRepositoryInterface.
type MockListMovieRepositoryInterfaceMockRecorder struct {
	mock *MockListMovieRepositoryInterface
}

// NewMockListMovieRepositoryInterface creates a new mock instance.
func NewMockListMovieRepositoryInterface(ctrl *gomock.Controller) *MockListMovieRepositoryInterface {
	mock := &MockListMovieRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockListMovieRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListMovieRepositoryInterface) EXPECT() *MockListMovieRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockListMovieRepositoryInterface) Create(listMovies []entity.ListMovie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", listMovies)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockListMovieRepositoryInterfaceMockRecorder) Create(listMovies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockListMovieRepositoryInterface)(nil).Create), listMovies)
}

// Deactivate mocks base method.
func (m *MockListMovieRepositoryInterface) Deactivate(listMovieID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate", listMovieID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockListMovieRepositoryInterfaceMockRecorder) Deactivate(listMovieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockListMovieRepositoryInterface)(nil).Deactivate), listMovieID)
}

// GetAll mocks base method.
func (m *MockListMovieRepositoryInterface) GetAll() ([]*entity.ListMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.ListMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockListMovieRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockListMovieRepositoryInterface)(nil).GetAll))
}

// GetAllByListID mocks base method.
func (m *MockListMovieRepositoryInterface) GetAllByListID(listID string) ([]entity.ListMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByListID", listID)
	ret0, _ := ret[0].([]entity.ListMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByListID indicates an expected call of GetAllByListID.
func (mr *MockListMovieRepositoryInterfaceMockRecorder) GetAllByListID(listID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByListID", reflect.TypeOf((*MockListMovieRepositoryInterface)(nil).GetAllByListID), listID)
}

// GetByID mocks base method.
func (m *MockListMovieRepositoryInterface) GetByID(listMovieID string) (entity.ListMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", listMovieID)
	ret0, _ := ret[0].(entity.ListMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockListMovieRepositoryInterfaceMockRecorder) GetByID(listMovieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockListMovieRepositoryInterface)(nil).GetByID), listMovieID)
}

// Update mocks base method.
func (m *MockListMovieRepositoryInterface) Update(listMovie *entity.ListMovie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", listMovie)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockListMovieRepositoryInterfaceMockRecorder) Update(listMovie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockListMovieRepositoryInterface)(nil).Update), listMovie)
}
